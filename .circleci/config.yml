version: 2.1

commands:
    install_awscli: 
      description: install awscli 
      steps: 
        - run: 
           name: install awscli 
           command: |
             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
             unzip awscliv2.zip
             sudo ./aws/install 
    install_ansible: 
      description: install Ansible
      steps: 
        - run: 
           name: install Ansible 
           command: |
              sudo apt update 
              sudo apt install software-properties-common -y
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible -y
    install_nodejs:
      description: install nodejs
      steps:
        - run:
           name: install nodejs 
           command: | 
             curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
             sudo apt-get install -y nodejs 
              

              
    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        WORKFLOW_ID:
         type: string
      steps:
        - run:
           name: Destroy environments
           when: on_fail
           command: |
             aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WORKFLOW_ID >>
             aws s3 rm s3://udapeople-<< parameters.WORKFLOW_ID >> --recursive
             aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.WORKFLOW_ID >>

    revert-migrations:
     description: Revert the last migration
     parameters:
       Workflow_ID:
        type: string  
     steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
             fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

  test-frontend:
    docker:
     - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: front-end unit test
          command: |
            cd backend
            npm install
            npm test
     
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end unit test
          command: |
            cd backend
            npm install
            npm test
      
            
  scan-frontend:
    docker:
     - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
     - image: cimg/node:13.8.0
    steps:
     - checkout
     - restore_cache:
          keys: [backend-deps]
     - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps: 
      - checkout 
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --tags project=udapeople \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --tags project=udapeople \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"    
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations [*].Instances [*].PublicIpAddress' \
            --output text)
           echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
           cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt   
      - destroy-environment:
         WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}


  configure-infrastructure:
    docker:
      - image: cimg/base:stable

    steps:
     - checkout
     - install_ansible
     - add_ssh_keys:
        fingerprints: ["3e:ca:dd:b4:c6:9b:b7:d2:c0:2b:64:c2:40:c7:de:2d"]
     - attach_workspace:
        at: ~/
     - run:
        name: Configure Server
        command: |
         cd .circleci/ansible
         cat inventory.txt
         ansible-playbook -i inventory.txt configure-server.yml
     - destroy-environment:
        WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
    

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_nodejs
      - run:
          name: Run migrations
          command: |
             cd backend
             echo $TYPEORM_USERNAME
             npm install
             npm run build
             npm run migrations > migrations_dump.txt 
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl https://kvdb.io/4j8TUDzuquJrNddAZ31MTD/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment:
         WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
         Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}



  deploy-frontend:
    docker:
     - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
         keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install 
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations [*].Instances [*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
         WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
         Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
           
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["3e:ca:dd:b4:c6:9b:b7:d2:c0:2b:64:c2:40:c7:de:2d"]
      - attach_workspace:
          at: ~/
      - restore_cache:
         keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
     
      - run:
          name: Package Backend
          command: |
           cd backend
           npm run build
           tar -czf artifact.tar.gz dist/* package*
           cd ..
           cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
           
      - run: 
          name: Deploy backend
          command: |
           export TYPEORM_MIGRATIONS_DIR=./migrations
           export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
           export TYPEORM_MIGRATIONS=./migrations/*.ts

           cd .circleci/ansible
           cat inventory.txt
           ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
         WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
         Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test.
          command: |
           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations [*].Instances [*].PublicIpAddress' \
            --output text)

            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
         WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
         Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}


  cloudfront-update:
    docker:
       - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports [?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID: 0:7}" \
              --stack-name InitialStack

      - destroy-environment:
         WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
         Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}


  cleanup:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                      
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"          

            if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
            then
             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]